# Задание 1
import timeit


x = int(input('Номер буквы в алфавите: '))
print(timeit.timeit(stmt="n = chr(ord('a') + x - 1)", number=10000, globals=globals()))


# Задание 2

# Без использования «Решета Эратосфена»;
def my_func_1():
    n = int(input())  # вводим число
    my_list = []  # создаем пустой список для хранения простых чисел
    for i in range(2, n + 1):  # пробегаем все числа от 2 до n
        for j in my_list:  # ищем количество делителей
            if i % j == 0:  # если делитель найден, число не простое
                break
        else:
            my_list.append(i)
    return my_list


print(my_func_1())

# Используя алгоритм «Решето Эратосфена»
n = int(input())
a = []  # список заполняется значениями от 0 до n
for i in range(n + 1):
    a.append(i)
a[1] = 0  # Вторым элементом является единица, которую не считают простым числом, забиваем ее нулем.
i = 2  # начинаем с 3-го элемента
while i <= n:
    if a[i] != 0:  # Если значение ячейки до этого не было обнулено, в этой ячейке содержится простое число
        j = i + i  # первое кратное ему будет в два раза больше
        while j <= n:
            a[j] = 0  # это число составное, поэтому заменяем его нулем
            j = j + i  # переходим к следующему числу, которое кратно i, (оно на i больше)
    i += 1
a = set(a)  # Превращая список во множество, избавляемся от всех нулей кроме одного
a.remove(0)  # удаляем ноль
print(a)

number_executions = 1
test_value = 1000

time1 = timeit.timeit(f'my_func_1({test_value})', setup='from __main__ import my_func_1', number=number_executions)
print(time1)

# Код в задании 1 выполняется быстрее чем 1-й код в задании 2
